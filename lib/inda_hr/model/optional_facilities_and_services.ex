# NOTE: This file is auto generated by OpenAPI Generator 6.3.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule IndaHr.Model.OptionalFacilitiesAndServices do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :Library,
    :Housing,
    :SportFacilities,
    :FinancialAids,
    :StudyAbroad,
    :DistanceLearning,
    :AcademicCounseling,
    :CareerServices,
    :InstitutionalHospital
  ]

  @type t :: %__MODULE__{
    :Library => IndaHr.Model.OptionalLibrary.t | nil,
    :Housing => IndaHr.Model.OptionalHousing.t | nil,
    :SportFacilities => IndaHr.Model.OptionalSportFacilities.t | nil,
    :FinancialAids => IndaHr.Model.OptionalFinancialAids.t | nil,
    :StudyAbroad => IndaHr.Model.OptionalStudyAbroad.t | nil,
    :DistanceLearning => IndaHr.Model.OptionalDistanceLearning.t | nil,
    :AcademicCounseling => IndaHr.Model.OptionalAcademicCounseling.t | nil,
    :CareerServices => IndaHr.Model.OptionalCareerServices.t | nil,
    :InstitutionalHospital => IndaHr.Model.OptionalInstitutionalHospital.t | nil
  }
end

defimpl Poison.Decoder, for: IndaHr.Model.OptionalFacilitiesAndServices do
  import IndaHr.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:Library, :struct, IndaHr.Model.OptionalLibrary, options)
    |> deserialize(:Housing, :struct, IndaHr.Model.OptionalHousing, options)
    |> deserialize(:SportFacilities, :struct, IndaHr.Model.OptionalSportFacilities, options)
    |> deserialize(:FinancialAids, :struct, IndaHr.Model.OptionalFinancialAids, options)
    |> deserialize(:StudyAbroad, :struct, IndaHr.Model.OptionalStudyAbroad, options)
    |> deserialize(:DistanceLearning, :struct, IndaHr.Model.OptionalDistanceLearning, options)
    |> deserialize(:AcademicCounseling, :struct, IndaHr.Model.OptionalAcademicCounseling, options)
    |> deserialize(:CareerServices, :struct, IndaHr.Model.OptionalCareerServices, options)
    |> deserialize(:InstitutionalHospital, :struct, IndaHr.Model.OptionalInstitutionalHospital, options)
  end
end
