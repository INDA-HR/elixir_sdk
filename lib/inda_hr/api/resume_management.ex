# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule inda_hr.Api.ResumeManagement do
  @moduledoc """
  API calls for all endpoints tagged `ResumeManagement`.
  """

  alias inda_hr.Connection
  import inda_hr.RequestBuilder


  @doc """
  Add Resume
   This method adds a resume to *indexname* and assigns it a *resume_id* (namely, a Unique Universal ID or UUID4).  On the right, we provide an example of input structure that corresponds to the result of the method [Parse Resume](https://api.inda.ai/hr/docs/v2/#operation/parse_resume__POST). However, the input structure is customizable. Further details can be found in the [Resume Model](https://api.inda.ai/hr/docs/v2/#tag/Resume) section.  Entities among skills, job (or position) titles and languages are automatically mapped by INDAto the adopted knowledge base, so that users can leverage on standardized values.Original values and entity IDs are available in *Details.RawValues* and *Details.Code*, respectively.Unrecognized items are ignored and not indexed, except for the *WorkExperiences.PositionTitle* entities.  This method adds the resume to be processed to the server's task queue and return immediately the *resume_id*. Note that the document may not successfully conclude the processing pipeline (e.g., it may be discarded because duplicate of one of the documents already present in the *indexname*), and thus it may not be actually added to the index.  In order to verify the resume status, the user can use the *resume_id* through the following methods: + [Resume Status](https://api.inda.ai/hr/docs/v2/#operation/resume_status__GET) + [Get Failures](https://api.inda.ai/hr/docs/v2/#operation/get_failures__GET)  For a synchronous approach, use the *sync* query parameter: if set to *true*, the resume is processed immediately. However, for standard usage in production environments, we recommend relying on the asynchronous strategy by ignoring  this parameter, in order to reduce the response times (due to the heterogeneity of resumes, the response time of each  resume processing can vary substantially among different documents).  Please note that, for user's convenience, the [API credits requests](https://api.inda.ai/hr/docs/v2/#tag/Credits-Management) assume that the  synchronous approach is named as *Add Resume Sync*, so that it can be easily distinguished from the asynchronous  *Add Resume*.  

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - file_item_request (FileItemRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :sync (boolean()): Optional. Whether to wait for the resume processing or not.
    - :resume_id (String.t): Optional. ID to use for the resume. Already existing IDs will cause a 409 error.
    - :src_lang (String.t): Optional. Language in which the following *Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the detected *Attachment.CV.File* language is assumed as `src_lang`.
    - :dst_lang (String.t): Optional. Destination language in which the following *Data* entities are translated: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the input or detected `src_lang` is assumed as `dst_lang`.
  ## Returns

  {:ok, inda_hr.Model.ItemIdResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec add_resume_post(Tesla.Env.client, String.t, inda_hr.Model.FileItemRequest.t, keyword()) :: {:ok, inda_hr.Model.BaseItemIdResponse.t} | {:ok, inda_hr.Model.ItemIdResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def add_resume_post(connection, indexname, file_item_request, opts \\ []) do
    optional_params = %{
      :"sync" => :query,
      :"resume_id" => :query,
      :"src_lang" => :query,
      :"dst_lang" => :query
    }
    %{}
    |> method(:post)
    |> url("/hr/v2/index/#{indexname}/resume/")
    |> add_param(:body, :body, file_item_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 202, %inda_hr.Model.BaseItemIdResponse{}},
      { 409, %inda_hr.Model.ErrorModel{}},
      { 422, %inda_hr.Model.ErrorModel{}},
      { 415, %inda_hr.Model.ErrorModel{}},
      { 201, %inda_hr.Model.BaseItemIdResponse{}},
      { 200, %inda_hr.Model.ItemIdResponse{}}
    ])
  end

  @doc """
  Delete Pic
   This method deletes the profile picture associated with the resume *resume_id* and sets its profile picture to the default one. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.DeleteItemResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_pic_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, inda_hr.Model.DeleteItemResponse.t} | {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def delete_pic_delete(connection, indexname, resume_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/pic/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.DeleteItemResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Delete Resume
   This method deletes the resume associated with *resume_id* from the index *indexname*. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.DeleteItemResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec delete_resume_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, inda_hr.Model.DeleteItemResponse.t} | {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:error, Tesla.Env.t}
  def delete_resume_delete(connection, indexname, resume_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.DeleteItemResponse{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Get CV
   This method returns the Base64 encoding and the extension of the document associated  with the resume *resume_id*. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.BinaryItemResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_cv_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.BinaryItemResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def get_cv_get(connection, indexname, resume_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/document/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.BinaryItemResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Get CV Text
   This method returns the text of the document associated with the resume *resume_id*. Note that this method merely returns the text, since the extraction has occurred during the add/update of the resume. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.DocumentTextResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_cv_text_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:ok, inda_hr.Model.DocumentTextResponse.t} | {:error, Tesla.Env.t}
  def get_cv_text_get(connection, indexname, resume_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/text/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.DocumentTextResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Get Pic
   This method returns the Base64 encoding and the extension of the profile picture associated with the resume *resume_id*. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.BinaryPicResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_pic_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.BinaryPicResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def get_pic_get(connection, indexname, resume_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/pic/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.BinaryPicResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Get Resume
   This method returns the information related to the resume stored with id *resume_id* in the index *indexname*.  As reported in the schema below, the method has two different response schemas: + a *4xx* response is returned when the resume is still in the processing queue, if the processing failed, or if its *resume_id* has never been seen; + a *200* response is returned if the resume has been successfully processed and inserted in the index. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.GetItemResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_resume_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, inda_hr.Model.GetItemResponse.t} | {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def get_resume_get(connection, indexname, resume_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.GetItemResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Patch Resume
   This method updates the information related to the resume stored with id *resume_id*.  This method accepts an application/json body with the same structure as [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST), however in this case all fields are optional. Fields that contain differences between the corresponding original ones are substituted, while new fields are added. Bear in mind that lists are considered as singular value, therefore to modify an entry in a list it is necessary to insert the full list.  Note that this method only modifies the information; in order to change the attached file, please refer to the method [Update Resume](https://api.inda.ai/hr/docs/v2/#operation/update_resume__PUT).  Entities among skills, job (or position) titles and languages are automatically mapped by INDAto the adopted knowledge base, so that users can leverage on standardized values.Original values and entity IDs are available in *Details.RawValues* and *Details.Code*, respectively.Unrecognized items are ignored and not indexed, except for the *WorkExperiences.PositionTitle* entities.  Please note that, unlike the [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST), this function does not allowusers to set a `dst_lang`, as the one used at index time cannot be changed.It can be retrieved by accessing the *Metadata.Language* field. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - patch_item_request (PatchItemRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :src_lang (String.t): Optional. Language in which the following *Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the indexed *Attachment.CV.File* language is assumed as `src_lang`.
  ## Returns

  {:ok, inda_hr.Model.PatchItemResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec patch_resume_patch(Tesla.Env.client, String.t, String.t, inda_hr.Model.PatchItemRequest.t, keyword()) :: {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.PatchItemResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def patch_resume_patch(connection, indexname, resume_id, patch_item_request, opts \\ []) do
    optional_params = %{
      :"src_lang" => :query
    }
    %{}
    |> method(:patch)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/")
    |> add_param(:body, :body, patch_item_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.PatchItemResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Resume Status
   This method returns the status of a resume, which can be any of the following: + *Processing*: the resume is in INDA process queues; + *Available*: the resume is in the index and is available to the user; + *Duplicate*: the resume was a duplicate, refer to the indicated *DuplicateID* to retrieve the already  indexed one; + *Failed*: the processing of the input failed; + *Missing*: none of the previous; the *resume_id* may be wrong or corresponding to a deleted resume. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.ResumeResponsesStatus.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec resume_status_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, inda_hr.Model.ErrorModel.t} | {:ok, inda_hr.Model.ResumeResponsesStatus.t} | {:ok, inda_hr.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def resume_status_get(connection, indexname, resume_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/status/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.ResumeResponsesStatus{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 422, %inda_hr.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Update Pic
   This method updates the profile picture associated with the resume *resume_id*.  The supported extensions are <code style='color: #333333; opacity: 0.9'>png</code>, <code style='color: #333333; opacity: 0.9'>jpg</code>, <code style='color: #333333; opacity: 0.9'>jpeg</code>. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - update_pic_request (UpdatePicRequest): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.PatchItemResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_pic_put(Tesla.Env.client, String.t, String.t, inda_hr.Model.UpdatePicRequest.t, keyword()) :: {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.PatchItemResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def update_pic_put(connection, indexname, resume_id, update_pic_request, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/pic/")
    |> add_param(:body, :body, update_pic_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.PatchItemResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end

  @doc """
  Update Resume
   This method updates both the information and the CV file (*Data.Attachments.CV.File*) related to the resume stored with  id *resume_id*.  This method manages to update the structured data in the same way [Patch Resume](https://api.inda.ai/hr/docs/v2/#operation/patch_resume__PATCH) does as well as  updating the corresponding CV file. It verifies if the file is duplicate with respect to the data already present into the *indexname*. If it finds a  possible duplicate with the same *resume_id* (if one is reuploading the same CV file) it proceeds updating the  structured data, skipping the file update, while it manages to completely delete the item *resume_id* if the file is  found on *indexname* but associated with a resume with different *resume_id*.  The method will enqueue the task and immediately return a response in an asynchronous fashion. In order to verify the  *resume_id* status one could rely on: + [Resume Status](https://api.inda.ai/hr/docs/v2/#operation/resume_status__GET) + [Get Failures](https://api.inda.ai/hr/docs/v2/#operation/get_failures__GET)  Entities among skills, job (or position) titles and languages are automatically mapped by INDAto the adopted knowledge base, so that users can leverage on standardized values.Original values and entity IDs are available in *Details.RawValues* and *Details.Code*, respectively.Unrecognized items are ignored and not indexed, except for the *WorkExperiences.PositionTitle* entities.  Please note that, unlike the [Add Resume](https://api.inda.ai/hr/docs/v2/#operation/add_resume__POST), this function does not allowusers to set a `dst_lang`, as the one used at index time cannot be changed.It can be retrieved by accessing the *Metadata.Language* field. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - update_item_request (UpdateItemRequest): 
  - opts (KeywordList): [optional] Optional parameters
    - :src_lang (String.t): Optional. Language in which the following *Data* entities are expressed: *Skills*, *WorkExperiences.Skills*, *JobTitles*, *WorkExperiences.PositionTitle* and *Languages*.If missing, the detected *Attachment.CV.File* language is assumed as `src_lang`.
  ## Returns

  {:ok, inda_hr.Model.BaseItemIdResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec update_resume_put(Tesla.Env.client, String.t, String.t, inda_hr.Model.UpdateItemRequest.t, keyword()) :: {:ok, inda_hr.Model.BaseModelsErrorModel.t} | {:ok, inda_hr.Model.BaseItemIdResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def update_resume_put(connection, indexname, resume_id, update_item_request, opts \\ []) do
    optional_params = %{
      :"src_lang" => :query
    }
    %{}
    |> method(:put)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/")
    |> add_param(:body, :body, update_item_request)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 202, %inda_hr.Model.BaseItemIdResponse{}},
      { 400, %inda_hr.Model.ErrorModel{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 409, %inda_hr.Model.BaseModelsErrorModel{}},
      { 422, %inda_hr.Model.BaseModelsErrorModel{}}
    ])
  end
end
