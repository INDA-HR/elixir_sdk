# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule inda_hr.Api.JobAdKnowledgeExtraction do
  @moduledoc """
  API calls for all endpoints tagged `JobAdKnowledgeExtraction`.
  """

  alias inda_hr.Connection
  import inda_hr.RequestBuilder


  @doc """
  Extract JobTitles from JobAd
   This method extract job titles that are semantically related with a job advert.  The input is a json containing the structure of the advert, as described in the schema below and in the example on the right.  The field *sections* in the body contains a list of documents, which correspond to distinct sections of the advert (e.g., company description, job description, requirements); in each document, the field *content* contains the text of the section, while the field *weight* (a number between <code style='color: #333333; opacity: 0.9'>0</code> and <code style='color: #333333; opacity: 0.9'>1</code>) can be used to give different weights to the different sections in the skill extraction (e.g., a section with the requirements is probably much more relevant for the skill extraction than a section with the company description); in the absence of the field *value*, the maximum value (i.e., *weight* = <code style='color: #333333; opacity: 0.9'>1</code>) will be assumed.  The field *header* contains the information about the job title. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - job_ad_entities_input (JobAdEntitiesInput): 
  - opts (KeywordList): [optional] Optional parameters
    - :size (integer()): Number of job titles to be returned, must be greater than <code style='color: #333333; opacity: 0.9'>0</code> and smaller or equal to <code style='color: #333333; opacity: 0.9'>10</code>.
    - :min_score (float()): Minimum score for the proposed job titles. The job titles with a score lower than this value will be neglected.
  ## Returns

  {:ok, inda_hr.Model.JobAdJobTitlesResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec extract_jobtitles_from_jobad_post(Tesla.Env.client, inda_hr.Model.JobAdEntitiesInput.t, keyword()) :: {:ok, inda_hr.Model.JobAdJobTitlesResponse.t} | {:ok, inda_hr.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def extract_jobtitles_from_jobad_post(connection, job_ad_entities_input, opts \\ []) do
    optional_params = %{
      :"size" => :query,
      :"min_score" => :query
    }
    %{}
    |> method(:post)
    |> url("/hr/v2/parse/jobad/jobtitles/")
    |> add_param(:body, :body, job_ad_entities_input)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.JobAdJobTitlesResponse{}},
      { 422, %inda_hr.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Extract Skills from JobAd
   This method extract job skills (both hard and soft skills) that are semantically related with a job advert.  The input is a json containing the structure of the advert, as described in the schema below and in the example on the right.  The field *sections* in the body contains a list of documents, which correspond to distinct sections of the advert (e.g., company description, job description, requirements); in each document, the field *content* contains the text of the section, while the field *weight* (a number between <code style='color: #333333; opacity: 0.9'>0</code> and <code style='color: #333333; opacity: 0.9'>1</code>) can be used to give different weights to the different sections in the skill extraction (e.g., a section with the requirements is probably much more relevant for the skill extraction than a section with the company description); in the absence of the field *value*, the maximum value (i.e., *weight* = <code style='color: #333333; opacity: 0.9'>1</code>) will be assumed.  The field *header* contains the information about the job title. 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - job_ad_entities_input (JobAdEntitiesInput): 
  - opts (KeywordList): [optional] Optional parameters
    - :size (integer()): Number of skills to be returned, must be greater than <code style='color: #333333; opacity: 0.9'>0</code> and smaller or equal to <code style='color: #333333; opacity: 0.9'>50</code>.
    - :min_score (float()): Minimum score for the proposed skills. The skills with a score lower than this value will be neglected.
  ## Returns

  {:ok, inda_hr.Model.JobAdSkillsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec extract_skills_from_jobad_post(Tesla.Env.client, inda_hr.Model.JobAdEntitiesInput.t, keyword()) :: {:ok, inda_hr.Model.JobAdSkillsResponse.t} | {:ok, inda_hr.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def extract_skills_from_jobad_post(connection, job_ad_entities_input, opts \\ []) do
    optional_params = %{
      :"size" => :query,
      :"min_score" => :query
    }
    %{}
    |> method(:post)
    |> url("/hr/v2/parse/jobad/skills/")
    |> add_param(:body, :body, job_ad_entities_input)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.JobAdSkillsResponse{}},
      { 422, %inda_hr.Model.HttpValidationError{}}
    ])
  end
end
