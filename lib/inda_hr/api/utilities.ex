# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule inda_hr.Api.Utilities do
  @moduledoc """
  API calls for all endpoints tagged `Utilities`.
  """

  alias inda_hr.Connection
  import inda_hr.RequestBuilder


  @doc """
  Clear Index Cache
   This method clears all standard and monitoring caches for given index. The *query parameters* allow to choose which caches should be cleared and to choose whether or not the method should wait to respond until the processing is completed.   The following caches can be cleared: + **Failed Documents**: Deletes all entries of failed documents cached for the index. + **Import statuses**: Deletes all entries of import statuses cached for the index. + **Tasks Queue**: Deletes tracking of all jobs scheduled to be performed on the index. WARNING: Does not delete the jobs themselves and does not prevent other jobs to be queued. + **Field data**: Deletes all field data on the index that are still cached. + **Queries Cache**: Deletes all queries performed on the index that are still cached. + **Requests Cache**: Deletes all requests performed on the index that are still cached.  *NOTE: Use only as a debug option!* 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - opts (KeywordList): [optional] Optional parameters
    - :clean_failures (boolean()): Whether or not the document failures should be cleaned.
    - :clean_imports (boolean()): Whether or not the import statuses should be cleaned.
    - :clean_queues (boolean()): Whether or not the queue should be cleaned.It cannot stop running tasks or prevent new tasks to be queued.
    - :clean_fielddata (boolean()): Whether or not the fields cache should be cleaned.
    - :clean_queries (boolean()): Whether or not the queries cache should be cleaned.
    - :clean_requests (boolean()): Whether or not the requests cache should be cleaned.
    - :wait_for_completion (boolean()): Whether or not the method should wait to responduntil the processing is completed.
  ## Returns

  {:ok, inda_hr.Model.IndexCacheDeletionResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec clear_index_cache_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, inda_hr.Model.IndexCacheDeletionResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:ok, inda_hr.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def clear_index_cache_delete(connection, indexname, opts \\ []) do
    optional_params = %{
      :"clean_failures" => :query,
      :"clean_imports" => :query,
      :"clean_queues" => :query,
      :"clean_fielddata" => :query,
      :"clean_queries" => :query,
      :"clean_requests" => :query,
      :"wait_for_completion" => :query
    }
    %{}
    |> method(:delete)
    |> url("/hr/v2/index/#{indexname}/cache/")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.IndexCacheDeletionResponse{}},
      { 500, %inda_hr.Model.ErrorModel{}},
      { 422, %inda_hr.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Health Status
   This method checks whether the service is up and running.  Returns the *status* of the service: <code style='color: #333333; opacity: 0.9'>green</code>, <code style='color: #333333; opacity: 0.9'>yellow</code> or <code style='color: #333333; opacity: 0.9'>red</code>.  A <code style='color: #333333; opacity: 0.9'>yellow</code> status means that at least the 80% of the services are available, <code style='color: #333333; opacity: 0.9'>red</code> that something is definitely not working properly.  

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.Check.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec health_status_get(Tesla.Env.client, keyword()) :: {:ok, inda_hr.Model.Check.t} | {:ok, inda_hr.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def health_status_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/hr/v2/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.Check{}},
      { 422, %inda_hr.Model.HttpValidationError{}}
    ])
  end
end
