# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule inda_hr.Api.KeywordsSearch do
  @moduledoc """
  API calls for all endpoints tagged `KeywordsSearch`.
  """

  alias inda_hr.Connection
  import inda_hr.RequestBuilder


  @doc """
  Keywords Autocomplete
   This method performs token autocompletion, based on a INDA dictionary, i.e., a large dictionary specialized to recruiting domain. An example of application is to improve the user experience of a recruiter who is writing search keywords for candidate screening.  The *term* to be completed (see *query parameters* below) must contain at least *2* characters. The output contains a list of possible complete terms sorted with respect to the frequency in INDA dictionary (the list is associated with the key *candidates*, as shown in the example on the right). 

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - term (String.t): Token to be completed
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, inda_hr.Model.AutocompleteResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec keywords_autocomplete_get(Tesla.Env.client, String.t, keyword()) :: {:ok, inda_hr.Model.AutocompleteResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:ok, inda_hr.Model.HttpValidationError.t} | {:error, Tesla.Env.t}
  def keywords_autocomplete_get(connection, term, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/hr/v2/keywords/search/autocomplete/")
    |> add_param(:query, :"term", term)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.AutocompleteResponse{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 422, %inda_hr.Model.HttpValidationError{}}
    ])
  end

  @doc """
  Similar Words in Resume
   This method works as the method [Similar Words](https://api.inda.ai/hr/docs/v2/#operation/similar_words__POST), but it is restricted to the words contained in the resume *resume_id*.  It could be used, for instance, to inspect a document found via [Search Resumes](https://api.inda.ai/hr/docs/v2/#operation/search_resumes__POST) in order to have better insights on the most similar words in the document to each query term used.  

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - indexname (String.t): 
  - resume_id (String.t): 
  - similar_words_query (SimilarWordsQuery): 
  - opts (KeywordList): [optional] Optional parameters
    - :size (integer()): Number of elements to be returned, must be greater than <code style='color: #333333; opacity: 0.9'>0</code> and smaller or equal to <code style='color: #333333; opacity: 0.9'>5</code>.
  ## Returns

  {:ok, inda_hr.Model.KeywordsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec similar_words_in_resume_post(Tesla.Env.client, String.t, String.t, inda_hr.Model.SimilarWordsQuery.t, keyword()) :: {:ok, inda_hr.Model.KeywordsResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def similar_words_in_resume_post(connection, indexname, resume_id, similar_words_query, opts \\ []) do
    optional_params = %{
      :"size" => :query
    }
    %{}
    |> method(:post)
    |> url("/hr/v2/index/#{indexname}/resume/#{resume_id}/keywords/search/semantic/")
    |> add_param(:body, :body, similar_words_query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.KeywordsResponse{}},
      { 400, %inda_hr.Model.ErrorModel{}},
      { 404, %inda_hr.Model.ErrorModel{}},
      { 422, %inda_hr.Model.ErrorModel{}}
    ])
  end

  @doc """
  Similar Words
   Given a list of *query* terms, this method returns, for each term, the *size* most similar words found in vocabulary. The similarity of each result to the corresponding query term is rated with a score between <code style='color: #333333; opacity: 0.9'>0</code> (minimum similarity) and <code style='color: #333333; opacity: 0.9'>1</code> (maximum similarity).  This method can be used to perform a **keyword expansion**: expanding a query word with its synonyms or semantically similar words allows a more flexible search with respect to a traditional word match or boolean search system. Note that each element of *query terms* is considered independently from the others.  This method returns a dictionary with keys *Hits* (the number of *query terms* found in vocabulary), *OutOfVocabulary* (the number of query terms not found in vocabulary), and *Out*, which is a list of dictionaries with two keys: the first key (*Query*) contains the query term, while the second one (*Results*) contains a list of dictionaries, one for each similar word. Each dictionary contains the word retrieved (*Term*) and its *Score* representing the similarity with the searched word, ranging from <code style='color: #333333; opacity: 0.9'>0</code> (minimum similarity) to <code style='color: #333333; opacity: 0.9'>1</code> (maximum similarity).  If all searched words are out of vocabulary, an error is raised.  

  ## Parameters

  - connection (inda_hr.Connection): Connection to server
  - similar_words_query (SimilarWordsQuery): 
  - opts (KeywordList): [optional] Optional parameters
    - :size (integer()): Number of elements to be returned, must be greater than <code style='color: #333333; opacity: 0.9'>0</code> and smaller or equal to <code style='color: #333333; opacity: 0.9'>5</code>.
  ## Returns

  {:ok, inda_hr.Model.KeywordsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec similar_words_post(Tesla.Env.client, inda_hr.Model.SimilarWordsQuery.t, keyword()) :: {:ok, inda_hr.Model.KeywordsResponse.t} | {:ok, inda_hr.Model.ErrorModel.t} | {:error, Tesla.Env.t}
  def similar_words_post(connection, similar_words_query, opts \\ []) do
    optional_params = %{
      :"size" => :query
    }
    %{}
    |> method(:post)
    |> url("/hr/v2/keywords/search/semantic/")
    |> add_param(:body, :body, similar_words_query)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %inda_hr.Model.KeywordsResponse{}},
      { 400, %inda_hr.Model.ErrorModel{}},
      { 422, %inda_hr.Model.ErrorModel{}}
    ])
  end
end
